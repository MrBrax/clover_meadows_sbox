@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Clover.Ui

<root>
	<div class="paint-window" @ref=" Window">
		<div class="vsplit">
			<div class="header">
				<h1>Paint</h1>
				<button class="close" @onclick=@( () => { Enabled = false; } )>
					<i class="icon">close</i>
				</button>
			</div>
			<div class="hsplit">
				<div class="menu">
					<section>
						<h2>Tools</h2>
						<button class="paint-button" @onclick=@( () => ZoomIn() )>
							üîé+
						</button>
						<button class="paint-button" @onclick=@( () => ZoomOut() )>
							üîé-
						</button>

						<button class="paint-button" @onclick=@( () => IncreaseBrushSize() )>
							‚úèÔ∏è+
						</button>
						<button class="paint-button" @onclick=@( () => DecreaseBrushSize() )>
							‚úèÔ∏è-
						</button>
					</section>

					<section>
						<h2>Palettes</h2>
						@foreach ( var palette in Utilities.Decals.GetPalettes() )
						{
							<button @onclick=@( () => SetPalette( palette ) ) class="paint-button small @( palette == PaletteName ? "active" : "" )">
								@palette
							</button>
						}
					</section>

					<section>
						<h2>Stats</h2>
						<div>@( $"Brush Size: {BrushSize}" )</div>
					</section>
				</div>
				<div class="main">
					<div @ref=" CanvasContainer" class="canvas">
						<Image class="canvas-texture" @ref=" Canvas" Texture=@DrawTexture @onmousedown=@OnCanvasMouseDown @onmouseup=@OnCanvasMouseUp/>
						@*<Image class="grid" @ref=" Grid" Texture=@GridTexture/>*@
						<div @ref=" Crosshair" class="crosshair"></div>
					</div>
					<div class="toolbar">
						<div class="current-colors">
							<div class="color-fg" style="background-color: @ForegroundColor.Hex"></div>
							<div class="color-bg" style="background-color: @BackgroundColor.Hex"></div>
						</div>
						<div class="palette">
							@for ( var i = 0; i < Palette.Count; i++ )
							{
								var index = i;
								var color = Palette[index];
								<button @onmousedown=@( ( PanelEvent e ) => SetColor( e, index ) ) style="background-color: @color.Hex"></button>
							}
						</div>
						<div class="actions">
							<TextEntry class="paint-input" Value:bind="@CurrentFileName" placeholder="Filename"/>
							<TextEntry class="paint-input" Value:bind="@CurrentName" placeholder="Name"/>

							<button class="paint-button" @onclick=@( () => Save() )>Save</button>
							<button class="paint-button" @onclick=@( () => InitialiseTexture() )>Clear</button>
						</div>
					</div>
				</div>
				<div class="sidebar">
					<div class="decals">
						@foreach ( var decal in Decals )
						{
							<button @onclick=@( () => LoadDecal( decal.ResourcePath ) ) class="decal">
								<Image Texture=@decal.Decal.Texture/>
								<div class="decal-name">@decal.Decal.Name</div>
							</button>
						}
						<button class="paint-button" @onclick=@( () => PopulateDecals() )>Refresh (@Decals.Count)</button>

					</div>
				</div>
			</div>
		</div>
	</div>
</root>
