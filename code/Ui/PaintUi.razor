@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Clover.Ui

<root>
	<div class="paint-window">
		<div class="vsplit">
			<div class="header">
				<h1>Paint</h1>
				<button class="close" @onclick=@( () => { Enabled = false; } )>
					<i class="icon">close</i>
				</button>
			</div>
			<div class="hsplit">
				<div class="main">
					<Image @ref=" Canvas" class="canvas" Texture=@DrawTexture @onmousedown=@OnCanvasMouseDown @onmouseup=@OnCanvasMouseUp/>
					<div class="toolbar">
						<div class="current-colors">
							<div class="color-fg" style="background-color: @ForegroundColor.Hex"></div>
							<div class="color-bg" style="background-color: @BackgroundColor.Hex"></div>
						</div>
						<div class="palette">
							@for ( var i = 0; i < Palette.Count; i++ )
							{
								var index = i;
								var color = Palette[index];
								<button @onmousedown=@( ( PanelEvent e ) => SetColor( e, index ) ) style="background-color: @color.Hex"></button>
							}
						</div>
						<div class="actions">
							<TextEntry class="paint-input" Value:bind="@CurrentFileName"/>
							<TextEntry class="paint-input" Value:bind="@CurrentName"/>

							<button class="paint-button" @onclick=@( () => Save() )>Save</button>
							<button class="paint-button" @onclick=@( () => Clear() )>Clear</button>
						</div>
					</div>
				</div>
				<div class="sidebar">
					<div class="decals">
						@foreach ( var decal in Decals )
						{
							<button @onclick=@( () => LoadDecal( decal.ResourcePath ) ) class="decal">
								<Image Texture=@decal.Decal.Texture/>
								@decal.Decal.Name
							</button>
						}
						<button class="paint-button" @onclick=@( () => PopulateDecals() )>Refresh (@Decals.Count)</button>

					</div>
				</div>
			</div>
		</div>
	</div>
</root>
