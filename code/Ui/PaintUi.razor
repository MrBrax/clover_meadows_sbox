@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Clover.Ui

<root>
	<div class="paint-window" @ref=" Window">
		<div class="vsplit">
			<div class="header">
				<h1>Paint</h1>
				<button class="close" @onclick=@( () => { Enabled = false; } )>
					<i class="icon">close</i>
				</button>
			</div>
			<div class="hsplit">
				<div class="menu">
					<section>
						<h2 class="section-title">Tools</h2>
						<div class="tools">
							<button @onclick=@( () => CurrentTool = PaintTool.Pencil ) class="paint-button @( CurrentTool == PaintTool.Pencil ? "active" : "" )">
								<img src="ui/icons/paint/pencil-solid-24.png"/>
							</button>
							<button @onclick=@( () => CurrentTool = PaintTool.Fill ) class="paint-button @( CurrentTool == PaintTool.Fill ? "active" : "" )">
								<img src="ui/icons/paint/color-fill-solid-24.png"/>
							</button>
							<button @onclick=@( () => CurrentTool = PaintTool.Spray ) class="paint-button @( CurrentTool == PaintTool.Spray ? "active" : "" )">
								<img src="ui/icons/paint/spray-can-solid-24.png"/>
							</button>
							<button @onclick=@( () => CurrentTool = PaintTool.Eraser ) class="paint-button @( CurrentTool == PaintTool.Eraser ? "active" : "" )">
								<img src="ui/icons/paint/eraser-solid-24.png"/>
							</button>
							<button @onclick=@( () => CurrentTool = PaintTool.Eyedropper ) class="paint-button @( CurrentTool == PaintTool.Eyedropper ? "active" : "" )">
								<img src="ui/icons/paint/eyedropper-solid-24.png"/>
							</button>
						</div>

						<div class="button-pair">
							<button class="paint-button" @onclick=@( () => ZoomIn() )>
								<img src="ui/icons/paint/zoom-in-solid-24.png"/>
							</button>
							<button class="paint-button" @onclick=@( () => ZoomOut() )>
								<img src="ui/icons/paint/zoom-out-solid-24.png"/>
							</button>
						</div>

						<div class="button-pair">
							<button class="paint-button" @onclick=@( () => Undo() )>
								<img src="ui/icons/paint/undo-regular-24.png"/>
							</button>

							<button class="paint-button" @onclick=@( () => Redo() )>
								<img src="ui/icons/paint/redo-regular-24.png"/>
							</button>
						</div>

					</section>

					@if ( CurrentTool == PaintTool.Pencil || CurrentTool == PaintTool.Spray || CurrentTool == PaintTool.Eraser )
					{
						<section>
							<h2 class="section-title">Tool size</h2>
							<div class="button-pair">
								<button class="paint-button" @onclick=@( () => DecreaseBrushSize() )>
									️<i class="icon">remove</i>
								</button>
								<button class="paint-button" @onclick=@( () => IncreaseBrushSize() )>
									️<i class="icon">add</i>
								</button>
							</div>
							<div>@( $"Brush Size: {BrushSize}" )</div>
						</section>
					}

					<section>
						<h2 class="section-title">Palettes</h2>
						@foreach ( var palette in Utilities.Decals.GetPalettes() )
						{
							<button @onclick=@( () => SetPalette( palette ) ) class="paint-button small @( palette == PaletteName ? "active" : "" )">
								@palette
							</button>
						}
					</section>

					<section class="actions">
						<h2 class="section-title">Actions</h2>
						<TextEntry class="paint-input" Value:bind="@CurrentFileName" placeholder="Filename"/>
						<TextEntry class="paint-input" Value:bind="@CurrentName" placeholder="Name"/>

						<button class="paint-button" @onclick=@( () => Save() )>Save</button>
						<button class="paint-button" @onclick=@( () => ResetPaint() )>Reset</button>
						<button class="paint-button" @onclick=@( () => New() )>New</button>
					</section>

					@*<section>
						<h2>Stats</h2>
						
					</section>*@
				</div>
				<div class="main">
					<div @ref=" CanvasContainer" class="canvas">
						<Image class="canvas-texture" @ref=" Canvas" Texture=@DrawTexture @onmousedown=@OnCanvasMouseDown @onmouseup=@OnCanvasMouseUp/>
						@*<Image class="grid" @ref=" Grid" Texture=@GridTexture/>*@
						<div @ref=" Crosshair" class="crosshair"></div>
					</div>
					<div class="toolbar">
						<div class="current-colors">
							<div class="color-fg" style="background-color: @ForegroundColor.Hex"></div>
							<div class="color-bg" style="background-color: @BackgroundColor.Hex"></div>
						</div>
						<div class="palette">
							@for ( var i = 0; i < Palette.Count; i++ )
							{
								var index = i;
								var color = Palette[index];
								<button @onmousedown=@( ( PanelEvent e ) => SetColor( e, index ) ) style="background-color: @color.Hex"></button>
							}
						</div>
					</div>
				</div>
				<div class="sidebar">
					<div class="decals">
						<h2 class="section-title">Decals</h2>
						@foreach ( var decal in Decals )
						{
							<button @onclick=@( () => LoadDecal( decal.ResourcePath ) ) class="decal">
								<Image Texture=@decal.Decal.Texture/>
								<div class="decal-name">@decal.Decal.Name</div>
							</button>
						}
						<button class="paint-button" @onclick=@( () => PopulateDecals() )>Refresh (@Decals.Count)</button>
					</div>
					<div class="images">
						<h2 class="section-title">Images</h2>
						@foreach ( var image in Images )
						{
							<button @onclick=@( () => LoadImage( image ) ) class="image">
								<Image Texture=@image/>
								<div class="image-name">@image.ResourceName</div>
							</button>
						}
						<button class="paint-button" @onclick=@( () => PopulateImages() )>Refresh (@Images.Count)</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</root>
